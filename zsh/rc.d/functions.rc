#!/bin/zsh

# functions - This is a collection of functions for the default shell, used across MacOS, Alpine, and Debian.

# container-compose() {
#  if [ -f "/usr/bin/podman-compose" ] ; then
#   /usr/bin/podman-compose $@
#  else
#   if [ -f "/usr/local/bin/docker" ] ; then
#    /usr/local/bin/docker compose $@
#   fi
#  fi
#  else
#   if [ -f "/usr/bin/docker" ] ; then
#    echo "/usr/bin/docker compose"
#   else
#    echo "No compose app found"
#    exit 1
#   fi
#  fi
# }

container-kubectl() {
 if [ -f "/usr/bin/kubectl" ] ; then
  /usr/bin/kubectl $@
 else
  if [ -f "/usr/local/bin/kubectl" ] ; then
   /usr/local/bin/kubectl $@
  fi
 fi
}

podman-build() {
 # Generic podman build use the `.arg` file to set params
 ARG_FILE=".arg"
 # file does not exists
 if [ ! -f "$ARG_FILE" ]; then
   touch "$ARG_FILE"
 fi
 podman build --build-arg-file "$ARG_FILE" \
              --file Containerfile \
              --tag "${1}:dev" \
              .  
}

podman-run() {
 # Generic podman build use the `.arg` file to set params
 ENV_FILE=".env"
 # file does not exists
 if [ ! -f "$ENV_FILE" ]; then
    touch "$ENV_FILE"
 fi
 podman run --interactive \
            --name "${1}" \
            --publish 8080:8080 \
            --rm \
            --tty \
            --volume Data:/mnt/volumes/container \
            --volume Configmaps:/mnt/volumes/configmaps \
            "${1}:dev" /bin/sh

            # --volume Data:/mnt/volumes/container \
            # --volume Backup:/mnt/volumes/backup \
            # --volume Configmaps:/mnt/volumes/configmaps \
            # --volume Secrets:/mnt/volumes/secrets \
}

container-compose-build() {
 BUILD_ARGS=""
 if [ -f "buildargs.conf" ] ; then
  BUILD_ARGS="--build-arg-file ./buildargs.conf"
 fi 
 BUILD="podman build $BUILD_ARGS  --file Containerfile --no-cache --tag '$(/usr/bin/basename $(pwd)):build' ./"
 echo "$BUILD"
 /bin/sh -c "$BUILD"
 # /Users/mada/.config/scripts/podman image prune
}

container-compose-run() {
 RUN_ARGS=""
 if [ -f "./container.conf" ] ; then
  RUN_ARGS_ARGS="--env-file ./container.conf "
 fi
 if [ -f "./.env" ] ; then
  RUN_ARGS="$RUN_ARGS --env-file ./.env"
 fi
 RUN="podman run $RUN_ARGS --interactive --name $(/usr/bin/basename $(pwd)) --publish-all --replace --rm --tty"
 RUN="$RUN --volume Container:/mnt/volumes/container"
 RUN="$RUN --volume Backup:/mnt/volumes/backup"
 RUN="$RUN --volume Configmaps:/mnt/volumes/configmaps"
 RUN="$RUN --volume Secrets:/mnt/volumes/secrets"
 RUN="$RUN localhost/$(/usr/bin/basename $(pwd)):build $@"
 echo "$RUN"
 /bin/sh -c "$RUN"
}

print-current-directory() {
 /usr/bin/basename "$(pwd)"
}

# container-compose-build() {
#  $(container-compose build $(pwd | awk -F'/' '{print $NF}') $@)
# }
# 
# container-compose-run() {
#  $(container-compose run --service-ports  $(pwd | awk -F'/' '{print $NF}') "$@")
# }


#  if test -f ".env"; then
#   set -a # automatically export all variables
#   source .env
#   set +a
#  fi
